자바에서 인터페이스(interface)는 객체의 사용방법을 정의한 타입이다.
인터페이스는 객체의 교환성을 높여주기 때문에 다형성을 구현하는 매우 중요한 역할을 한다.
인터페이스는 자바 프로그래밍 언어에서 클래스들이 구현해야 하는 동작을 지정하는데 
사용되는 추상형이다.

인터페이스도 .java 형태의 소스 파일로 작성하여 컴파일러를 통해 .class형태로 컴파일되기 때문에 물리적 형태는 클래스와 동일하다.
[public] interface 인터페이스명() {}

[public] interface 인터페이스명{
//상수 필드
타입 상수명 = 값;
//추상 메소드
타입 메소드명(매개변수,...);
//디폴트 메소드
default 타입 메소드맵(매개변수, ...){...} -> 다른 클래스에서 구현하지 않아도 된다.
static 타입 메소드명(매개변수, ...){...} -> 객체 없이 사용할 수 있다.


인터페이스에서 필드는 무조건 상수로 선언이 된다. 
클래스에서 사수는 public static final로 선언하는데 인터페이스에서는 
3가지 중 어떤것을 생략하더라도 컴파일 과정에서 자동으로 생성된다.

[public static final] 타입 상수명 = 값;


개발 코드가 인터페이스 메소드를 호출하면 인터페이스는 객체의 메소드를 호출한다.
객체는 인터페이스에서 정의된 추상 메소드와 동일한 메소드 이름, 매개타입, 리턴타입을 가진 실체 메소드를 가지고 있어야 한다.
이러한 객체를 인터페이스의 구현(implement) 객체라도 하고 구현 객체를 생성하는 클래스를 구현클래스라고 한다.

인터페이스 변수 = new 인터페이스() {
	//인터페이스에 선언된 추상 메소드의 실체 메소드 선언
}; 세미클론을 무조건 붙임. -> 굳이 클래스를 만들필요가없을때 (한번만 사용할때)

강제 타입변환
구현클래스 변수 = (구현클래스) 인터페이스변수;














